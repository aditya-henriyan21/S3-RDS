name: Deploy Flask App to EC2


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run basic syntax check
      run: |
        python -m py_compile app.py
    
    - name: Run tests
      run: |
        python -m unittest test_app.py

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to EC2 via SCP
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "."
        target: "/home/ubuntu/flask-app"
        rm: true
    
    - name: Setup and restart application
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: SECRET_KEY,DB_HOST,DB_NAME,DB_USER,DB_PASSWORD,DB_PORT,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,S3_BUCKET
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        S3_BUCKET: ${{ secrets.S3_BUCKET }}
        script: |
          # Navigate to app directory
          cd /home/ubuntu/flask-app
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python3 -m venv venv
          fi
          
          # Activate virtual environment and install/update dependencies
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Create environment file for the service
          sudo tee /etc/flask-app.env > /dev/null <<EOF
          SECRET_KEY=${SECRET_KEY}
          DB_HOST=${DB_HOST}
          DB_NAME=${DB_NAME}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          DB_PORT=${DB_PORT}
          AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          AWS_REGION=${AWS_REGION}
          S3_BUCKET=${S3_BUCKET}
          EOF
          
          # Secure the environment file
          sudo chmod 600 /etc/flask-app.env
          sudo chown root:root /etc/flask-app.env
          
          # Create systemd service file if it doesn't exist
          if [ ! -f "/etc/systemd/system/flaskapp.service" ]; then
            echo "Creating systemd service..."
            sudo tee /etc/systemd/system/flaskapp.service > /dev/null <<EOF
          [Unit]
          Description=Flask Demo App
          After=network.target
          
          [Service]
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/home/ubuntu/flask-app
          Environment=PATH=/home/ubuntu/flask-app/venv/bin
          EnvironmentFile=/etc/flask-app.env
          ExecStart=/home/ubuntu/flask-app/venv/bin/gunicorn --bind 0.0.0.0:5000 app:app
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF
            
            # Reload systemd and enable service
            sudo systemctl daemon-reload
            sudo systemctl enable flaskapp
          fi
          
          # Restart the application service
          sudo systemctl restart flaskapp
          
          # Wait a moment for service to start
          sleep 3
          
          # Check if service is running
          if sudo systemctl is-active --quiet flaskapp; then
            echo "✅ Deployment successful! Service is running."
          else
            echo "❌ Deployment failed - service not running"
            sudo systemctl status flaskapp --no-pager
            exit 1
          fi
          
          # Show service status
          echo "Service status:"
          sudo systemctl status flaskapp --no-pager -l